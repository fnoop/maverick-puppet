#!/bin/bash

# Maverick - UAV Companion Computer system
# http://github.com/fnoop/maverick

# If tput is available, populate colour variables
if hash tput 2>/dev/null; then
    bgbl=$(tput setab 0)
    bgr=$(tput setab 1)
    bgg=$(tput setab 2)
    bgb=$(tput setab 4)
    bgw=$(tput setab 7)
    bold=$(tput bold)
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    blue=$(tput setaf 12)
    white=$(tput setaf 7)
    reset=$(tput sgr0)
fi

if [ -f "/srv/maverick/software/maverick/VERSION" ]; then
    ver=$(cat /srv/maverick/software/maverick/VERSION)
elif [ -f "../VERSION" ]; then
    ver=$(cat ../VERSION)
else
    ver=""
fi
if [ -z "$ver" ]; then
    $ver = "n/a"
fi
echo
echo "${bgb}${bold}Maverick - UAV Companion Computer System - Version ${ver}${reset}"

echo

# Check that we're root or mav user
if [[ $EUID -ne 0 && $USER != "mav" ]]; then
    echo "Error: This must be run as root or mav user"
    echo
    exit 1
fi

# Determine script path
_path=$(dirname $0)
_path=$(cd $_path && pwd)
_path=$(dirname $_path)

# Define usage function
usage () {
    echo "maverick [--options] command"
    echo
    echo "Options"
    echo " --env=[bootstrap|dev|flight]              Environment to configure: bootstrap, dev or flight"
    echo " --dryrun                                  Configure dry run - just show what would be done"
    echo " --module=<module>                         Only make changes to module <module>"
    echo
    echo "Commands"
    echo " status                                  Show current running status"
    echo " info                                    Display system information"
    echo " netinfo                                 Display network information"
    echo " self-update                             Update to latest maverick code"
    echo " configure                               Configure system - ${bold}BEWARE this may do major changes to your existing system${reset}"
    echo " start                                   Start Maverick service"
    echo " stop                                    Stop Maverick service"
    echo " restart                                 Restart Maverick service"
    echo " enable                                  Enable Maverick service at boot"
    echo " disable                                 Disable Maverick service at boot"
    echo " log                                     Display realtime log for Maverick service"
    echo
    echo "${bgr}${bold}WARNING: Maverick may make major changes to the system is it running on.${reset}"
    echo "${bgr}${bold}Please do not run without understanding what it does.${reset}"
    echo
    exit 1
}

if [[ $# -eq 0 ]] ; then
    usage
fi

# Parse arguments
for i in "$@"
do
    case $i in
        --env=*)
            ENV="${i#*=}"
            shift
            ;;
        --dryrun)
            DRYRUN="--noop"
            shift
            ;;
        --module=*)
            MODULE="${i#*=}"
            shift
            ;;
        configure)
            CONFIGURE="true"
            shift
            ;;
        status)
            STATUS="true"
            shift
            ;;
        info)
            INFO="true"
            shift
            ;;
        netinfo)
            NETINFO="true"
            shift
            ;;
        self-update)
            SELFUPDATE="true"
            shift
            ;;
        start)
            START="true"
            shift
            ;;
        stop)
            STOP="true"
            shift
            ;;
        restart)
            RESTART="true"
            shift
            ;;
        enable)
            ENABLE="true"
            shift
            ;;
        disable)
            DISABLE="true"
            shift
            ;;
        log)
            LOG="true"
            shift
            ;;
        *)
            # If stop or start action, grab the service name from next argument
            if [ "${START}" == "true" -o "${STOP}" == "true" -o "${RESTART}" == "true" -o "${ENABLE}" == "true" -o "${DISABLE}" == "true" -o "${LOG}" == "true" ]; then
                SERVICE="${i#*}"
                shift
            else
                echo "Error: argument not recognised"
                echo
                usage
            fi
            ;;
    esac
done

mavenv () {
    if [ "x$1" == "xdev" ]; then
        echo "Maverick Environment:   ${bgr}${white}${bold} dev ${reset}"
    elif [ "x$1" == "xflight" ]; then
        echo "Maverick Environment:   ${bgg}${white}${bold} flight ${reset}"
    elif [ "x$1" == "xbootstrap" ]; then
        echo "Maverick Environment:   ${bgb}${white}${bold} bootstrap ${reset}"
    fi
}

# If git branch config file exists, source it
if [ -e /srv/maverick/data/config/maverick/maverick-branch.conf ]; then
    source /srv/maverick/data/config/maverick/maverick-branch.conf
fi
if [ -e /srv/maverick/data/config/maverick-branch.conf ]; then
    source /srv/maverick/data/config/maverick-branch.conf
fi
# If git branch not set by now, set it to stable by default
if [ -z $MAVERICK_BRANCH ]; then
    MAVERICK_BRANCH=stable
fi

if [ "$MAVERICK_BRANCH" != "stable" ]; then
    echo "${bgbl}${bold}${red}WARNING: Maverick is using branch:${MAVERICK_BRANCH}, not stable${reset}"
    echo
fi

# Migrate old environment marker to new location
if [ -e /srv/maverick/.environment ]; then
    mv -f /srv/maverick/.environment /srv/maverick/data/config/maverick/maverick-environment.conf
fi

# If self-update set, action and then exit
if [ "$SELFUPDATE" == "true" ]; then
    # If config branch is different to current branch, change branch
    CURRENT_BRANCH=$(cd /srv/maverick/software/maverick; git rev-parse --abbrev-ref HEAD)
    if [ $CURRENT_BRANCH != $MAVERICK_BRANCH ]; then
        echo "Changing maverick branch from ${CURRENT_BRANCH} to ${MAVERICK_BRANCH}"
        # Unshallow if necessary
        if [ -e /srv/maverick/software/maverick/.git/shallow ]; then
            echo "- Unshallow-ing git clone"
            $(cd /srv/maverick/software/maverick; git fetch --unshallow)
        fi
        # Re-ref origin if necessary
        $(cd /srv/maverick/software/maverick; git config remote.origin.fetch |grep '*:refs' >/dev/null 2>&1)
        if [ $? -eq 1 ]; then
            echo "- Changing origin refs for all remote branches"
            $(cd /srv/maverick/software/maverick; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*)
        fi
        # Checkout new branch
        CHECKOUT=$(cd /srv/maverick/software/maverick; git fetch; git checkout $MAVERICK_BRANCH)
    fi
        
    # Next, do a git pull to update maverick code
    if [ -e /srv/maverick/software/maverick/conf/puppet.conf ]; then
        if [ $EUID -eq 0 ]; then
            su mav -c "cd /srv/maverick/software/maverick; git pull origin"
            if [ -d "/srv/maverick/software/maverick-fcs" ]; then
                su mav -c "cd /srv/maverick/software/maverick-fcs; git pull origin"
            fi
        elif [ $USER == "mav" ]; then
            cd /srv/maverick/software/maverick; git pull origin;
            if [ -d "/srv/maverick/software/maverick-fcs" ]; then
                cd /srv/maverick/software/maverick-fcs; git pull origin;
            fi
        fi
        echo
        echo "${green}Maverick update completed${reset}"
        echo
    else
        echo
        echo "${bgr}Error: Maverick not found in expected location: /srv/maverick/software/maverick${reset}"
        echo
    fi

    # Finally, exit
    exit 0
fi

# If info set, action and then exit
if [ "$INFO" == "true" ]; then
    if [ -e /srv/maverick/data/config/maverick/maverick-environment.conf ]; then
        environment=$(cat /srv/maverick/data/config/maverick/maverick-environment.conf)
    fi
    mavenv ${environment}
    echo
    /usr/bin/python /srv/maverick/software/maverick/bin/maverick-info
    echo
    exit 0
fi

# If netinfo set, action and then exit
if [ "$NETINFO" == "true" ]; then
    if [ -e /srv/maverick/data/config/maverick/maverick-environment.conf ]; then
        environment=$(cat /srv/maverick/data/config/maverick/maverick-environment.conf)
    fi
    mavenv ${environment}
    echo
    /usr/bin/python /srv/maverick/software/maverick/bin/maverick-netinfo
    echo
    exit 0
fi

# If status set, action and then exit
if [ "$STATUS" == "true" ]; then
    status () {
        if [ $3 -eq 0 ]; then
            _status="${green}Running${reset}"
        else
            _status="${red}Stopped${reset}"
        fi
        if [ $4 -eq 0 ]; then
            _atboot="${green}Enabled${reset}"
        else
            _atboot="${red}Disabled${reset}"
        fi
        echo "$1:$2:$_status | $_atboot\n"
    }
    if [ -e /srv/maverick/data/config/maverick/maverick-environment.conf ]; then
        environment=$(cat /srv/maverick/data/config/maverick/maverick-environment.conf)
    fi
    mavenv ${environment}
    echo
    statusout+="Service:Description: Status | At Boot\n"
    statusout+="------------:------------:------------------\n"
    statusout+="${blue}Flight Controller Services${reset}\n"
    mavfc=1
    mavfcen=1
    mavfcservice="<not set>"
    for mavtype in "mavproxy" "cmavnode" "mavlink-router"; do
        $(systemctl is-enabled "maverick-$mavtype@fc" >/dev/null 2>&1)
        if [ $? -eq 0 ]; then
            $(systemctl status "maverick-$mavtype@fc" >/dev/null 2>&1)
            if [ $? -eq 0 ]; then
                mavfc=0
            else
                mavfc=1
            fi
            mavfcservice="$mavtype@fc"
            mavfcen=0
        fi
    done
    statusout+=$(status "${mavfcservice}" "Mavlink (FC)" $mavfc $mavfcen)
    (systemctl status maverick-params@fc >/dev/null 2>&1); fc=$?; (systemctl is-enabled maverick-params@fc >/dev/null 2>&1); fcen=$?; statusout+=$(status "params@fc" "Parameter Control (FC)" $fc $fcen)
    (systemctl status maverick-rosmaster@fc >/dev/null 2>&1); rosmfc=$?; (systemctl is-enabled maverick-rosmaster@fc >/dev/null 2>&1); rosmfcen=$?; statusout+=$(status "rosmaster@fc" "ROS (FC)" $rosmfc $rosmfcen)
    (systemctl status maverick-mavros@fc >/dev/null 2>&1); mavrosfc=$?; (systemctl is-enabled maverick-mavros@fc >/dev/null 2>&1); mavrosfcen=$?; statusout+=$(status "mavros@fc" "Mavros (FC)" $mavrosfc $mavrosfcen)
    if [ "$environment" == "dev" ]; then
        statusout+='------------:------------:------------------\n'
        statusout+="${blue}Dev SITL Services${reset}\n"
        (systemctl status maverick-sitl >/dev/null 2>&1); sitl=$?; (systemctl is-enabled maverick-sitl >/dev/null 2>&1); sitlen=$?; statusout+=$(status "sitl" "SITL" $sitl $sitlen)
        mavsitl=1
        mavsitlen=1
        mavsitlservice="<not set>"
        for mavtype in "mavproxy" "cmavnode" "mavlink-router"; do
            $(systemctl is-enabled "maverick-$mavtype@sitl" >/dev/null 2>&1)
            if [ $? -eq 0 ]; then
                $(systemctl status "maverick-$mavtype@sitl" >/dev/null 2>&1)
                if [ $? -eq 0 ]; then
                    mavsitl=0
                else
                    mavsitl=1
                fi
                mavsitlservice="$mavtype@sitl"
                mavsitlen=0
            fi
        done
        statusout+=$(status "${mavsitlservice}" "Mavlink (SITL)" $mavsitl $mavsitlen)
        (systemctl status maverick-params@sitl >/dev/null 2>&1); sitl=$?; (systemctl is-enabled maverick-params@sitl >/dev/null 2>&1); sitlen=$?; statusout+=$(status "params@sitl" "Parameter Control (SITL)" $sitl $sitlen)
        (systemctl status maverick-rosmaster@sitl >/dev/null 2>&1); rosmsitl=$?; (systemctl is-enabled maverick-rosmaster@sitl >/dev/null 2>&1); rosmsitlen=$?; statusout+=$(status "rosmaster@sitl" "ROS (SITL)" $rosmsitl $rosmsitlen)
        (systemctl status maverick-mavros@sitl >/dev/null 2>&1); mavrossitl=$?; (systemctl is-enabled maverick-mavros@sitl >/dev/null 2>&1); mavrossitlen=$?; statusout+=$(status "mavros@sitl" "Mavros (SITL)" $mavrossitl $mavrossitlen)
    fi
    statusout+='------------:------------:------------------\n'
    statusout+="${blue}Web Services${reset}\n"
    (systemctl status maverick-nginx >/dev/null 2>&1); status=$?; (systemctl is-enabled maverick-nginx >/dev/null 2>&1); statusen=$?; statusout+=$(status "nginx" "Webserver" $status $statusen)
    (systemctl status maverick-cloud9 >/dev/null 2>&1); c9=$?; (systemctl is-enabled maverick-cloud9 >/dev/null 2>&1); c9en=$?; statusout+=$(status "cloud9" "Cloud9 IDE" $c9 $c9en)
    (systemctl status maverick-grafana >/dev/null 2>&1); status=$?; (systemctl is-enabled maverick-grafana >/dev/null 2>&1); statusen=$?; statusout+=$(status "grafana" "Analysis Dashboard" $status $statusen)
    statusout+='------------:------------:------------------\n'
    statusout+="${blue}Analysis Services${reset}\n"
    (systemctl status maverick-mavlogd >/dev/null 2>&1); status=$?; (systemctl is-enabled maverick-mavlogd >/dev/null 2>&1); statusen=$?; statusout+=$(status "mavlogd" "Log Import Daemon" $status $statusen)
    (systemctl status maverick-influxd >/dev/null 2>&1); status=$?; (systemctl is-enabled maverick-influxd >/dev/null 2>&1); statusen=$?; statusout+=$(status "influxd" "Time Data DB" $status $statusen)
    (systemctl status maverick-collectd >/dev/null 2>&1); status=$?; (systemctl is-enabled maverick-collectd >/dev/null 2>&1); statusen=$?; statusout+=$(status "collectd" "System Metrics" $status $statusen)
    statusout+='------------:------------:------------------\n'
    statusout+="${blue}Vision Services${reset}\n"
    (systemctl status maverick-visiond >/dev/null 2>&1); vis=$?; (systemctl is-enabled maverick-visiond >/dev/null 2>&1); visen=$?; statusout+=$(status "visiond" "Vision Daemon" $vis $visen)
    (systemctl status maverick-csd >/dev/null 2>&1); csd=$?; (systemctl is-enabled maverick-csd >/dev/null 2>&1); csden=$?; statusout+=$(status "csd" "Camera Streaming Daemon" $csd $csden)
    (systemctl status maverick-vision_landing >/dev/null 2>&1); visland=$?; (systemctl is-enabled maverick-vision_landing >/dev/null 2>&1); vislanden=$?; statusout+=$(status "vision_landing" "Vision Landing" $visland $vislanden)
    (systemctl status maverick-vision_seek >/dev/null 2>&1); seek=$?; (systemctl is-enabled maverick-vision_seek >/dev/null 2>&1); seeken=$?; statusout+=$(status "vision_seek" "Seek Thermal Vision" $seek $seeken)
    (systemctl status maverick-coav >/dev/null 2>&1); coav=$?; (systemctl is-enabled maverick-coav >/dev/null 2>&1); coaven=$?; statusout+=$(status "coav" "Collision Avoidance" $coav $coaven)

    echo -e $statusout | column -c 3 -s : -t
    echo
    exit 0
fi

startservice() {
    srvresult=$(sudo systemctl start "maverick-$1" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Start: ${green}Success${reset}"
    else
        echo " Start: ${red}Failure${reset}: $srvresult"
    fi  
}

stopservice() {
    srvresult=$(sudo systemctl stop "maverick-$1" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Stop: ${green}Success${reset}"
    else
        echo " Stop: ${red}Failure${reset}: $srvresult"
    fi
}

# If start requested, action and then exit
if [ "$START" == "true" ]; then
    echo "Starting service: ${SERVICE}"
    startservice "${SERVICE}"
    echo
    exit 0
fi

# If stop requested, action and then exit
if [ "$STOP" == "true" ]; then
    echo "Stopping service: ${SERVICE}"
    stopservice ${SERVICE}
    echo
    exit 0
fi

# If restart requested, action stop then start
if [ "$RESTART" == "true" ]; then
    echo "Restarting service: ${SERVICE}"
    stopservice ${SERVICE}
    startservice ${SERVICE}
    echo
    exit 0
fi

# If log requested, action and then exit
if [ "$LOG" == "true" ]; then
    echo "Displaying service log: ${SERVICE}"
    sudo journalctl -u maverick-${SERVICE} -f
    echo
    exit 0
fi

# If enable requested, action and then exit
if [ "$ENABLE" == "true" ]; then
    echo "Enabling service: ${SERVICE}"
    srvresult=$(sudo systemctl enable "maverick-${SERVICE}" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Enable: ${green}Success${reset}"
    else
        echo " Enable: ${red}Failure${reset}: $srvresult"
    fi
    echo
    exit 0
fi

# If disable requested, action and then exit
if [ "$DISABLE" == "true" ]; then
    echo "Disabling service: ${SERVICE}"
    srvresult=$(sudo systemctl disable "maverick-${SERVICE}" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Disable: ${green}Success${reset}"
    else
        echo " Disable: ${red}Failure${reset}: $srvresult"
    fi
    echo
    exit 0
fi

# Read environment marker if it exists
if [ -e /srv/maverick/data/config/maverick/maverick-environment.conf ]; then
    environment=$(cat /srv/maverick/data/config/maverick/maverick-environment.conf)
    if [[ $environment && "$ENV" != "" ]]; then
        echo "Environment marker set but is being ignored as --env is set"
    elif [[ "$environment" == "bootstrap" || "$environment" == "dev" || "$environment" == "flight" ]]; then
        echo "Environment marker set and is being used to set maverick environment: ${environment}"
        ENV=$environment
    else
        echo "Environment marker set but not recognised"
    fi
fi

# If environment not set to dev or flight, exit
if [[ "$ENV" != "dev" && "$ENV" != "flight" && "$ENV" != "bootstrap" ]]; then 
    echo "Error: --env not set to a recognised environment (bootstrap, dev or flight)"
    echo
    usage
fi

# If configure not set, exit
if [ "$CONFIGURE" != "true" ]; then	
    echo "Error: configure not set"
    echo
    usage
fi

# Check that there are no apt/dpkg processes going on
_aptdpkg=$(ps -ef |egrep 'apt|dpkg' |grep -v grep |grep -v dnsmasq)
if  [ "z${_aptdpkg}" != "z" ]; then
    echo "${red}Error: There are active apt/dpkg processes.  This will interfere with Maverick, please ensure there are no apt/dpkg processes before running Maverick.${reset}"
    exit 1
fi

# Check that puppet, hiera and facter are not installed through system packages
for pkg in "puppet" "hiera" "facter" "ruby-rgen"; do
    if dpkg --get-selections | grep "^$pkg[[:space:]]*install$" >/dev/null; then
        echo "Warning: $pkg installed as a system package, removing.."
        if [ $EUID -eq 0 ]; then
            DEBIAN_FRONTEND=noninteractive apt-get -y remove $pkg >/dev/null 2>&1
        else
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y remove $pkg >/dev/null 2>&1
        fi
    fi
done

# Check that rsync
if ! hash rsync 2>/dev/null; then
    echo 'rsync not installed, installing..'
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install rsync >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install rsync >/dev/null 2>&1
    fi
fi

# Check that ruby/gem is installed
if ! hash gem 2>/dev/null; then
    echo 'gem not installed, installing..'
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install ruby >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install ruby >/dev/null 2>&1
    fi
fi

# Check that ruby-shadow is installed
_rubyshadow=$(dpkg -s ruby-shadow 2>/dev/null)
if [ "z$_rubyshadow" == "z" ]; then
    echo "Installing ruby-shadow for password management"
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-shadow >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-shadow >/dev/null 2>&1
    fi
fi

# Check that ruby-dev is installed
_rubydev=$(dpkg -s ruby-dev 2>/dev/null)
if [ "z$_rubydev" == "z" ]; then
    echo "Installing ruby-dev for gems"
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-dev >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-dev >/dev/null 2>&1
    fi
fi

# Check that puppet is installed through gem
declare -A GEMVERSIONS=( [puppet]=5.0.0 [hiera]=3.4.0 [facter]=2.4.6 )
for pkg in "hiera" "facter" "puppet"; do
    if ! gem list $pkg -v ${GEMVERSIONS[$pkg]} -i >/dev/null; then
        echo "Installing $pkg from gems"
        if [ $EUID -eq 0 ]; then
            gem uninstall $pkg --ignore-dependencies --executables --force >/dev/null
            if [ -e /usr/bin/$pkg ]; then rm -f /usr/bin/$pkg; fi
            gem install $pkg --no-rdoc --no-ri --force -v ${GEMVERSIONS[$pkg]} >/dev/null
        else
            sudo gem uninstall $pkg --ignore-dependencies --executables --force >/dev/null
            if [ -e /usr/bin/$pkg ]; then sudo rm -f /usr/bin/$pkg; fi
            sudo gem install $pkg --no-rdoc --no-ri --force -v ${GEMVERSIONS[$pkg]} >/dev/null
        fi
    fi
done
if [ $EUID -eq 0 ]; then
    gem cleanup >/dev/null
else
    sudo gem cleanup >/dev/null
fi

# Fix for Ubuntu 14.10 and Puppet 4.10.1: https://github.com/fnoop/maverick/issues/466
# Long-term fix already in Puppet 4.10.2
_ubuntu=$(/bin/grep -e 'DISTRIB_RELEASE\=14\.' /etc/lsb-release 2>/dev/null)
_puppet=$(gem list puppet |grep puppet |grep '4.10.1')
if [ -e /var/lib/gems/1.9.1/gems ]; then
    _patchfiles=$(grep -lr 'Gem::Version.new(RUBY_VERSION)' /var/lib/gems/1.9.1/gems)
else
    _patchfiles=""
fi
if [ "z${_ubuntu}" != "z" -a "z${_puppet}" != "z" -a "z${_patchfiles}" != "z" ]; then
    echo "Patching puppet 4.10.1 on ubuntu 14"
    sudo sed -i -e 's/Gem::Version.new(RUBY_VERSION)/Gem::Version.new(RUBY_VERSION.dup)/' $_patchfiles
fi

# Check that puppet is installed
if ! hash puppet 2>/dev/null; then
    echo 'Puppet not installed, something has gone wrong..'
    exit 1
fi

# Check that python is installed
if ! hash python 2>/dev/null; then
    echo 'Python not installed, attempting to install..'
    if hash apt-get 2>/dev/null; then
        if [ $EUID -eq 0 ]; then
            DEBIAN_FRONTEND=noninteractive apt-get -y install python >/dev/null 2>&1
        elif [ $USER == "mav" ]; then
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python >/dev/null 2>&1
        fi
        if hash python; then
            pythoninstalled=true
        fi
    fi
else
    pythoninstalled=true
fi
if ! $pythoninstalled; then
    echo 'Error: Python not installed and could not be installed'
    echo
    exit 1
fi

# Check that openssh-server is installed
_pkg=$(dpkg -s openssh-server 2>/dev/null)
if [ "z$_pkg" == "z" ]; then
    echo "Installing openssh-server"
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install openssh-server >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install openssh-server >/dev/null 2>&1
    fi
fi

# If git is installed at this point, then force git to ignore any changes to localconf.json
#  in the current directory, which might contain sensitive information
if hash git 2>/dev/null; then
    if [[ $EUID -eq 0 && $SUDO_USER != "" && $SUDO_USER != "root" && -e conf/localconf.json ]]; then
        su $SUDO_USER -c "git update-index --assume-unchanged conf/localconf.json"
    fi
fi

# Kludge to address #60: Remove upstart before we run puppet as it gets upset
#  with broken upstart/init setup
#ubuntu=$(/bin/grep -e 'DISTRIB_DESCRIPTION\="Ubuntu 1[56]' /etc/lsb-release 2>/dev/null)
#upstart=$(which upstart)
#if [[ "$ubuntu" != "" && "$upstart" != "" ]]; then
#	echo "Removing broken ubuntu upstart"
#	sudo dpkg --purge unity-greeter upstart >/dev/null 2>&1
#fi

# OK we're good to go!
mavenv ${ENV}
if [ "x${DRYRUN}" == "x" ]; then
    echo "${bgbl}${bold}${green}Proceeding to update system configuration - please be patient, this can take a while..${reset}"
    RUNMODE="--no-noop"
else
    echo "${bgbl}${bold}${blue}Dry run requested, running configure in a readonly/nondestructive mode${reset}"
    RUNMODE="--noop"
fi
if [ ! -z $MODULE ]; then
    echo "${bgbl}${bold}${blue}Module specified, restricting configure to ${MODULE}${reset}"
    TAGS="--tags ${MODULE}"
else
    TAGS=""
fi
echo

# If /boot/maverick and /srv/maverick exists, move the contents and use them
if [ -e /srv/maverick -a -e /boot/maverick ]; then
    echo "Migrating supplied config to maverick location"
    sudo rsync -K -a /boot/maverick/* /srv/maverick/data/config >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        sudo rm -rf /boot/maverick
    fi
fi

DT=$(date +"%Y-%m-%d-%H-%M")
# If installed maverick exists use that logpath, otherwise use /var/tmp
if [ -e /srv/maverick/var/log/maverick ]; then
    LOGPATH=/srv/maverick/var/log/maverick
else
    LOGPATH=/var/tmp
fi
if [ -e ./conf/puppet.conf ]; then
    if [ $EUID -eq 0 ]; then
        STDLIB_LOG_DEPRECATIONS=false puppet apply --color=true --confdir=conf --config=./conf/puppet-bootstrap.conf --environmentpath=$_path/conf/environments --environment $ENV --modulepath=$_path/manifests/maverick-modules:$_path/manifests/puppet-modules $TAGS $RUNMODE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    elif [ $USER == "mav" ]; then
        sudo -H STDLIB_LOG_DEPRECATIONS=false puppet apply --color=true --confdir=conf --config=./conf/puppet-bootstrap.conf --environmentpath=$_path/conf/environments --environment $ENV --modulepath=$_path/manifests/maverick-modules:$_path/manifests/puppet-modules $TAGS $RUNMODE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    fi
elif [ -e /srv/maverick/software/maverick/conf/puppet.conf ]; then
    cwd=$(pwd)
    cd /srv/maverick/software/maverick
    if [ $EUID -eq 0 ]; then
        STDLIB_LOG_DEPRECATIONS=false puppet apply --color=true --confdir=conf --environment $ENV $TAGS $RUNMODE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    elif [ $USER == "mav" ]; then
        sudo -H STDLIB_LOG_DEPRECATIONS=false puppet apply --color=true --confdir=conf --environment $ENV $TAGS $RUNMODE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    fi
    cd $cwd
else
    echo "Error: Maverick software not found in current directory or expected location: /srv/maverick/software/maverick"
    exit 1
fi

# If maverick not running from expected home assume we want to migrate local-node files
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [ x"$DIR" != x"/srv/maverick/software/maverick/bin" ]; then
    cp -unp $DIR/../conf/local-nodes/*.json /srv/maverick/software/maverick/conf/local-nodes >/dev/null 2>&1
fi

# If bootstrap environment, print a reboot warning
if [ $ENV == "bootstrap" ]; then
    echo
    echo "-------------------------"
    echo "WARNING: If this is the first bootstrap run, please reboot NOW to activate system changes."
    echo "If system is not rebooted after first bootstrap run, further runs may not work as expected."
    echo "After reboot, login as 'mav' user - default password is 'wingman'"
    echo "-------------------------"
fi

# Finish up
echo
echo "Maverick finished, happy flying :)"
echo
